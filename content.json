{"posts":[{"title":"Hello world!","text":"花了数个小时，终于建立起了专属于我的个人网站。 先是下载了一个名为 Node.js 的东西，接着用其包管理器 npm 下载了 hexo，然后又是一系列包的安装……第二天才开始着手主题的配置，一个名为 icarus 的主题最终被我选中，又是一系列的配置…… hexo 的部署过程令我迷惑，它替我完成了 git 的推送，但是我的分支管理好像出了亿点问题。到现在本地还有4000+个挂起的更改，然而hexo d命令依然能推送更改，并且 github pages 的显示效果与本地预览一模一样。以往习惯的add、commit和push工作流现在却换为了这样一套模式：hexo g，hexo s，hexo clean和hexo d，好在很快便适应了。 第四天又花了点时间治理一下混乱的版本控制，未果。我已经受够繁文缛节了，直接git push origin --force --all强制推送。现在本地必要文件全放在远端main分支，hexo d生成文件则推送到gh-pages分支。推送后发现hexo还会自动创建很多远程分支来提示我更新package.json和package-lock.json中的依赖项版本，甚至已经pull requests，在我手动合并后还能自动删除分支，这些都是一个名为Dependabot的自动化管理服务做的。合并，合并，通通合并~ 不过，以后应该写点啥呢？","link":"/2023/07/20/hello-world/"},{"title":"selenium笔记","text":"去年学习selenium模块时做的的笔记，当时看完网上教程后写了一个简单的项目。 全局操作防止日志写屏123456## 加上参数，禁止 chromedriver 日志写屏options = webdriver.ChromeOptions()options.add_experimental_option('excludeSwitches', ['enable-logging'])## 创建 WebDriver 对象，指明使用chrome浏览器驱动wd = webdriver.Chrome(options=options) ## 这里指定 options 参数 设置等待时间Selenium 的 Webdriver 对象有个方法叫 implicitly_wait ，可以称之为隐式等待，或者全局等待。该方法接受一个参数，用来指定最大等待时长。 1wd.implicitly_wait(10) 操作元素操作元素的基本方法 点击元素：click() 输入框 清除（如有必要）：clear() 输入：send_keys(‘str’) 获取元素信息 文本内容：text 属性：get_attribute(‘class’) HTML：element.get_attribute(‘outerHTML’) 和 element.get_attribute(‘innerHTML’) 输入框文字：element.get_attribute(‘value’) 文本内容2： 可见文本内容：element.get_attribute(‘innerText’) 所有内容：element.get_attribute(‘textContent’) CSS Selectortag, id, class find_element(By.CSS_SELECTOR, CSS Selector参数) id, .class, ##id find_element(By.ID, ‘id’) 子元素，后代元素 直接子元素：元素1 &gt; 元素2 后代元素： 元素1 元素2 根据属性 find_element(By.CSS_SELECTOR, CSS Selector参数[attribute=’str’]) 可以不写标签参数和具体属性值 *= 包含 ^= 开头 $= 结尾 多属性：CSS Selector参数[attribute1=’str1’][attribute2=’str2’] 验证CSS Selector直接在浏览器开发者工具中验证 更高阶frame切换/窗口切换切换到frame wd.switch_to.frame(frame_reference) frame_reference 可以是 frame 元素的属性 name 或者 ID wd.switch_to.frame(wd.find_element(By.TAG_NAME, “tag”)) 切换回主HTML：wd.switch_to.default_content() 切换到新的窗口 wd.switch_to.window(handle) 1234567for handle in wd.window_handles: ## 先切换到该窗口 wd.switch_to.window(handle) ## 得到该窗口的标题栏字符串，判断是不是我们要操作的那个窗口 if 'target' in wd.title: ## 如果是，那么这时候WebDriver对象就是对应的该该窗口，正好，跳出循环， break 保存当前窗口句柄wd.current_window_handle 选择框radio 当前选中元素：’input[checked=”checked”]’ 选择元素：element.click() checkbox 必须先获取当前该复选框的状态 ，如果该选项已经勾选了，就不能再点击。否则反而会取消选择 先把 已经选中的选项全部点击一下，确保都是未选状态再点击目标 select 根据选项的 value属性值: .select_by_value(‘value’) 根据选项的 次序 （从1开始）: .select_by_index() 根据选项的 可见文本：.select_by_visible_text() deselect 可去除选中元素 deselect_all 去除选中所有元素 实战技巧更多动作：ActionChains类1from selenium.webdriver.common.action_chains import ActionChains 直接执行javascript冻结页面在 开发者工具栏 console 里面执行如下js代码 1setTimeout(function(){debugger}, 5000) 表示在 5000毫秒后，执行 debugger 命令执行该命令会 浏览器会进入debug状态。debug状态有个特性，界面被冻住，不管我们怎么点击界面都不会触发事件。 弹出对话框 Alert如果我们不去点击它，页面的其它元素是不能操作的。模拟用户点击: driver.switch_to.alert.accept() ConfirmOK: driver.switch_to.alert.accept()Cancle: driver.switch_to.alert.dismiss() Promptdriver.switch_to.alert.send_keys() 有些弹窗并非浏览器的alert 窗口，而是 html元素 ，这种对话框，只需要通过之前介绍的选择器选中并进行相应的操作就可以了。 其他技巧 窗口大小 获取：driver.get_window_size() 改变：driver.set_window_size(x, y) 窗口标题driver.title URL地址driver.current_url 截屏driver.get_screenshot_as_file(‘1.png’) 手机模式 12345678from selenium import webdrivermobile_emulation = { &quot;deviceName&quot;: &quot;Nexus 5&quot; }chrome_options = webdriver.ChromeOptions()chrome_options.add_experimental_option(&quot;mobileEmulation&quot;, mobile_emulation)driver = webdriver.Chrome( desired_capabilities = chrome_options.to_capabilities())driver.get('http://www.baidu.com')input()driver.quit() 上传文件send_keys() Xpath选择器[attribute2=’str2’]:","link":"/2023/08/09/selenium%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pyhton","slug":"Pyhton","link":"/tags/Pyhton/"},{"name":"Selenium","slug":"Selenium","link":"/tags/Selenium/"}],"categories":[{"name":"啥都写","slug":"啥都写","link":"/categories/%E5%95%A5%E9%83%BD%E5%86%99/"},{"name":"笔记","slug":"笔记","link":"/categories/%E7%AC%94%E8%AE%B0/"}],"pages":[]}