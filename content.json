{"posts":[{"title":"博客的迁移","text":"在Windows上构建该博客系统后，我将其托管到了GitHub，试图在Mac上克隆博客系统，希望实现在两台电脑上分别写文章，是否可行？先给出结论，由于依赖版本的不同，跨平台迁移几乎就是重构整个博客项目的过程。 这意味着，我只能在一台电脑上推送博客，另一台电脑只能用来写md文件。如果两个电脑上能做到下载相同版本的环境话，也许能实现目标，不过可能有点麻烦，具体细节我就没探索了。 所以，这篇文章的意义在于指导如何迁移博客。 安装ndoe.js和hexo使用homebrew安装node.js（macOS） 1brew install node 查看是否安装成功。 12node -vnpm -v Windows我的node和npm版本分别是v18.17.0和9.8.1，homebrew安装没法指定具体的小版本，导致后面下载到的各种依赖的版本也会有很多不同。 安装hexo 1npm install hexo-cli -g 安装依赖包和主题首先clone原仓库，只需要main分支即可，main分支被我用于托管博客系统。 1git clone -b main &lt;repository_url&gt; 当然，如果是重建博客的话，只需把原来的目录复制下来即可，其中的node_modules文件夹不必复制。 进入克隆仓库目录，以下命令都在该目录下运行。 接着直接运行以下命令，npm自动会根据package.json和package-lock.json这两个文件的内容，下载并安装所需的包及其依赖项，它们都在新生成的node_modules文件夹里。 1npm install 还需安装主题，我使用的主题是icarus。按照主题文档说明，需运行以下命令： 1git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus -b &lt;version number&gt; --depth 1 icarus也可以通过npm下载。 报错 | 冲突产生使用 hexo g &amp;&amp; hexo s 来预览页面，但是此时发生了一些错误，提示某些依赖的版本与所需版本不兼容。随即根据报错提示更新了依赖包，最后成功生成博客内容。 但是package.json和package-lock.json都发生了更改，这很可能与下载的node.js和hexo的版本与之前的不一致有关。所以，我没法同时在两个电脑上构建博客系统，保持各个环境和依赖的版本一致恐怕是一件很麻烦的事情。","link":"/2023/09/12/rebuild-blog/"},{"title":"Hello world!","text":"花了数个小时，终于建立起了专属于我的个人网站。 先是下载了一个名为 Node.js 的东西，接着用其包管理器 npm 下载了 hexo，然后又是一系列包的安装……第二天才开始着手主题的配置，一个名为 icarus 的主题最终被我选中，又是一系列的配置…… hexo 的部署过程令我迷惑，它替我完成了 git 的推送，但是我的分支管理好像出了亿点问题。到现在本地还有4000+个挂起的更改，然而hexo d命令依然能推送更改，并且 github pages 的显示效果与本地预览一模一样。以往习惯的add、commit和push工作流现在却换为了这样一套模式：hexo g，hexo s，hexo clean和hexo d，好在很快便适应了。 第四天又花了点时间治理一下混乱的版本控制，未果。我已经受够繁文缛节了，直接git push origin --force --all强制推送。现在本地必要文件全放在远端main分支，hexo d生成文件则推送到gh-pages分支。推送后发现hexo还会自动创建很多远程分支来提示我更新package.json和package-lock.json中的依赖项版本，甚至已经pull requests，在我手动合并后还能自动删除分支，这些都是一个名为Dependabot的自动化管理服务做的。合并，合并，通通合并~ 不过，以后应该写点啥呢？","link":"/2023/07/20/hello-world/"},{"title":"selenium笔记","text":"去年学习selenium模块时做的的笔记，当时看完网上教程后写了一个简单的项目。 全局操作防止日志写屏123456## 加上参数，禁止 chromedriver 日志写屏options = webdriver.ChromeOptions()options.add_experimental_option('excludeSwitches', ['enable-logging'])## 创建 WebDriver 对象，指明使用chrome浏览器驱动wd = webdriver.Chrome(options=options) ## 这里指定 options 参数 设置等待时间Selenium 的 Webdriver 对象有个方法叫 implicitly_wait ，可以称之为隐式等待，或者全局等待。该方法接受一个参数，用来指定最大等待时长。 1wd.implicitly_wait(10) 操作元素操作元素的基本方法 点击元素：click() 输入框 清除（如有必要）：clear() 输入：send_keys(‘str’) 获取元素信息 文本内容：text 属性：get_attribute(‘class’) HTML：element.get_attribute(‘outerHTML’) 和 element.get_attribute(‘innerHTML’) 输入框文字：element.get_attribute(‘value’) 文本内容2： 可见文本内容：element.get_attribute(‘innerText’) 所有内容：element.get_attribute(‘textContent’) CSS Selectortag, id, class find_element(By.CSS_SELECTOR, CSS Selector参数) id, .class, ##id find_element(By.ID, ‘id’) 子元素，后代元素 直接子元素：元素1 &gt; 元素2 后代元素： 元素1 元素2 根据属性 find_element(By.CSS_SELECTOR, CSS Selector参数[attribute=’str’]) 可以不写标签参数和具体属性值 *= 包含 ^= 开头 $= 结尾 多属性：CSS Selector参数[attribute1=’str1’][attribute2=’str2’] 验证CSS Selector直接在浏览器开发者工具中验证 更高阶frame切换/窗口切换切换到frame wd.switch_to.frame(frame_reference) frame_reference 可以是 frame 元素的属性 name 或者 ID wd.switch_to.frame(wd.find_element(By.TAG_NAME, “tag”)) 切换回主HTML：wd.switch_to.default_content() 切换到新的窗口 wd.switch_to.window(handle) 1234567for handle in wd.window_handles: ## 先切换到该窗口 wd.switch_to.window(handle) ## 得到该窗口的标题栏字符串，判断是不是我们要操作的那个窗口 if 'target' in wd.title: ## 如果是，那么这时候WebDriver对象就是对应的该该窗口，正好，跳出循环， break 保存当前窗口句柄wd.current_window_handle 选择框radio 当前选中元素：’input[checked=”checked”]’ 选择元素：element.click() checkbox 必须先获取当前该复选框的状态 ，如果该选项已经勾选了，就不能再点击。否则反而会取消选择 先把 已经选中的选项全部点击一下，确保都是未选状态再点击目标 select 根据选项的 value属性值: .select_by_value(‘value’) 根据选项的 次序 （从1开始）: .select_by_index() 根据选项的 可见文本：.select_by_visible_text() deselect 可去除选中元素 deselect_all 去除选中所有元素 实战技巧更多动作：ActionChains类1from selenium.webdriver.common.action_chains import ActionChains 直接执行javascript冻结页面在 开发者工具栏 console 里面执行如下js代码 1setTimeout(function(){debugger}, 5000) 表示在 5000毫秒后，执行 debugger 命令执行该命令会 浏览器会进入debug状态。debug状态有个特性，界面被冻住，不管我们怎么点击界面都不会触发事件。 弹出对话框 Alert如果我们不去点击它，页面的其它元素是不能操作的。模拟用户点击: driver.switch_to.alert.accept() ConfirmOK: driver.switch_to.alert.accept()Cancle: driver.switch_to.alert.dismiss() Promptdriver.switch_to.alert.send_keys() 有些弹窗并非浏览器的alert 窗口，而是 html元素 ，这种对话框，只需要通过之前介绍的选择器选中并进行相应的操作就可以了。 其他技巧 窗口大小 获取：driver.get_window_size() 改变：driver.set_window_size(x, y) 窗口标题driver.title URL地址driver.current_url 截屏driver.get_screenshot_as_file(‘1.png’) 手机模式 12345678from selenium import webdrivermobile_emulation = { &quot;deviceName&quot;: &quot;Nexus 5&quot; }chrome_options = webdriver.ChromeOptions()chrome_options.add_experimental_option(&quot;mobileEmulation&quot;, mobile_emulation)driver = webdriver.Chrome( desired_capabilities = chrome_options.to_capabilities())driver.get('http://www.baidu.com')input()driver.quit() 上传文件send_keys() Xpath选择器[attribute2=’str2’]:","link":"/2023/08/09/selenium%E7%AC%94%E8%AE%B0/"},{"title":"docker配置csapp环境","text":"前言仰慕CSAPP之名久矣，于上学期向图书馆借阅数周，阅之心情舒畅，甚为过瘾，不负盛誉也。然及暑假，嫌其书重，未能携归，忽感空虚万分，孤寂难堪。后新学期至，即以重金购得。 纸上得来终觉浅薄，觉知精髓在于实践。数日前始配置实验环境，然其过程艰难，折磨数日，迨至今日，终得成功。念及同经配环境之苦者，遂以此文以记之。 ！！！以下内容只是简单记录，不对任何读者负责 概述CSAPP的实验的部分步骤需要在Linux系统上运行，网上有使用docker配好的镜像，但我尝试运行却遇到很多问题。恰好之前稍微学了点docker，于是干脆自行配置环境。重点参考了网上这一教程。 本地计算机的环境是 MacBook Air (M1, 2020)配置、 macOS Ventura系统，使用 iTerm2终端，以下配置过程均在此运行。我还有一台 Win10 系统电脑，后续可能会按此过程重新配置一遍已验证其跨平台性。 环境配置下载 Docker Desktop 并换源，在设置-docker引擎中将 registry-mirrors 换成以下内容并重启docker： 123&quot;registry-mirrors&quot;: [ &quot;https://docker.mirrors.ustc.edu.cn/&quot; ] 我一开始看到这是json格式，以为可以添加多个源，但是后来发现这样做反而没法正常运行，会在 docker build 时遇到EOF的报错。不过我现在仍然没有找到出现问题的具体原因，按理说配置多个源应该是被允许的。 拉取镜像 1docker pull ubuntu:22.04 编写Dockerfile 1FROM --platform=linux/amd64 ubuntu:22.04 如果不使用 --platform=linux/amd64 参数，那么后续在运行二进制文件时会报错 qemu-x86_64: Could not open '/lib64/ld-linux-x86-64.so.2': No such file or directory 。我是在stackoverflow找到了这一解决方案，这也是我为什么要自行编写Dockerfile而不是直接使用官方ubuntu镜像的原因。 生成镜像 1docker build -t myubuntu . 建立目录挂载实现文件同步，~/Desktop/CSAPP-Labs 是我保存Lab文件的本地位置，挂载后两边的文件将完全同步。 1docker run -it -v ~/Desktop/CSAPP-Labs:/csapp --name=csapp_env myubuntu /bin/bash 执行该命令后终端就进入ubuntu系统，可直接运行相关命令 备份并换apt源 1cp /etc/apt/sources.list /etc/apt/sources.list.bak 接着apt换清华源 我使用的是m1芯片的mac，但使用ubuntu-ports镜像却无效，使用普通镜像即可 所有选项都选否，Ubuntu版本选22.04 LTS 以上选项经过我多次尝试，具体内容如下： 内容较长，点击展开 >folded1234567891011121314151617# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse# deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiversedeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse# deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiversedeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse# deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiversedeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse# deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse# deb http://security.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse# # deb-src http://security.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse# 预发布软件源，不建议启用# deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse# # deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse 该ubuntu系统中没有文本编辑器（apt 没换源升级之前又没法 apt install vim ），我找到了两种方法来更改 /etc/apt/sources.list 使用本地计算机新建一个文件写入上述文本，将其放入挂载目录 ~/Desktop/CSAPP-Labs ，那么它将出现在ubuntu系统的 csapp 文件中，接下来 cp /csapp/sources.list /etc/apt/sources.list 可以通过Docker Desktop直接进行编辑，找到容器进入Files直接去对应目录编辑即可 换源后需更新，并重新升级apt 12source /etc/apt/source.listapt update 安装编译工具链 1apt install build-essential 验证安装：gcc --version要不是没有编辑器，不然必须给它运行个 Hello World! 此时还缺少一些文件，虽然能正常运行 ./dlc bits.c ，但是会在 make btest 时报错 fatal error: bits/libc-header-start.h: No such file or directory 运行dlc可能会被报错缺少权限，需 chmod u+x ./dlc 还需下载以下工具 1apt-get install gcc-multilib 我依然是在stackoverflow找到的解决方案原因好像是缺少32位系统的头文件和库文件 最终，make命令成功运行，编译出btest二进制文件，可以直接运行 退出容器 1exit 下次启动容器需要先打开docker 12docker start csapp_envdocker exec -it csapp_env /bin/bash 注意事项 Docker运行的ubuntu好像直接拥有管理员权限，所有命令直接运行即可，不加 sudo 在iterm2终端执行ubuntu命令时，直接 clear 就被警告，需使用快捷键 control + L 查看系统版本：cat /etc/os-release 有时候退出容器，容器并不会自动停止，需使用命令 docker stop","link":"/2023/09/19/csapp-env/"}],"tags":[{"name":"Pyhton","slug":"Pyhton","link":"/tags/Pyhton/"},{"name":"Selenium","slug":"Selenium","link":"/tags/Selenium/"},{"name":"C","slug":"C","link":"/tags/C/"}],"categories":[{"name":"建站历程","slug":"建站历程","link":"/categories/%E5%BB%BA%E7%AB%99%E5%8E%86%E7%A8%8B/"},{"name":"笔记","slug":"笔记","link":"/categories/%E7%AC%94%E8%AE%B0/"},{"name":"csapp","slug":"csapp","link":"/categories/csapp/"}],"pages":[{"title":"关于我","text":"个人简介某技术学院传统工科本科生，不学无术，在编程中寻找到一些价值。 HollowGL，取自我喜欢的一款简单的独立游戏《Hollow Knight》，那 GL 呢？也许是26个字母中取两个的随机组合吧 : ) 博客信息目前博客挂载到 Github Pages 上，基本上也就我一个人在看，一些文章的表述可能很难理解（本来我的文字功底就很弱）。 博客文件开源，源码放在远端main分支，hexo d 则推送到gh-pages分支 更新日志具体细节见文章分类建站历程 2023.7.20 小学期极其无聊开始折腾建站，于第二天配置Icarus主题，第四天开源所有文件 2023.9.12 记录重构过程，添加目录，配置about页面(花了很多精力研究如何关闭about页面的许可证(╥_╥) )","link":"/about/index.html"}]}